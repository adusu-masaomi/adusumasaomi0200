<div class="sortThese">
<div class="nested-fields well form-inline">
  <%= f.input :sequential_id, label: "No", input_html:{ id: "sequential_id" , style: 'width:65px;text-align:right;margin: 0;', :readonly => true} %>
  <!--<%= f.input :purchase_order_history_id,  input_html:{ id: "purchase_order_history_id" }, as: :hidden %>-->
  <%= f.label :品番選択, {style: 'width:770px'}  %>
  <%= f.label :単位, {style: 'width:50px;margin-left:-85px;'}  %>
  <%= f.label :メール送信フラグ, {style: 'width:120px;margin-left:-5px;'}  %>
  </br>
  <!--upd170720マスター類はあらかじめセットされた変数から取得-->
  <%= f.collection_select :material_id, @material_masters.all, :id, :p_material_code_name, {:selected => f.object.material_id || 1} , 
  {class: "searchableSelect2_1 form-control" , id: "material_id" , name:"material_id[]",  style: 'width:650px' } %>
  
  <%= f.label :数量, {style: 'width:28px'}  %>
  <%= f.text_field :quantity, size:10, name:"quantity[]", :tabindex=>"2"  %>
  <td>&nbsp;&nbsp;</td>
  <%= f.collection_select :unit_master_id, @unit_masters.all, :id, :unit_name, {:selected => f.object.unit_master_id || 3} , {class: "searchableUnit" , style: 'width:50px' } %>
  
  <%= f.select :mail_sent_flag, Order.mail_flag, {:include_blank => true}, 
       {id:'mail_sent_flag', :class => "my-custom-class", style: 'width:120px;margin-left:0px;font-size:16px;font-weight:bold;color:red;' } %>
  
  <!--以下スペースあり-->
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <%= link_to_remove_association 'アイテム削除', f , :class => 'btn btn-xs btn-danger'%>
  <!--以下スペースあり-->
  &nbsp;&nbsp;&nbsp;&nbsp;
 
  </br>
  <%= f.input :material_code,  input_html:{ id: "material_code", name: "material_code[]", style: 'width:150px', :tabindex=>"0", :onkeydown => "setMaterialCode($(this).val())" } %>
  <%= f.input :material_name,  input_html:{ id: "material_name", name: "material_name[]", style: 'width:400px',  :class => "material_name", :tabindex=>"1" } %>
   <!--以下スペースあり-->
  &nbsp;&nbsp;&nbsp;&nbsp;
  <%= f.collection_select :maker_id, @maker_masters.all, :id, :maker_name, {:selected => f.object.maker_id || 1} , 
      {class: "searchableMaker form-control" , id: "maker_id" , name:"maker_id[]",  style: 'width:200px;margin-left:-20px', :tabindex => "3" } %>
  
  <%= f.input :list_price,  input_html:{ id: "list_price", name: "list_price[]", style: 'width:100px' , :tabindex=>"4" } %>
  
  <%= f.input :maker_id_hide,  input_html:{id:"maker_id_hide", }, as: :hidden %></br>
  <%= f.input :material_code,  input_html:{id:"material_code_hide", name:"material_code_hide" }, as: :hidden %></br>

  
</div>
</div>
 
 <script type="text/javascript">

  //cIndex = 0;
  //var i = 0;
  
  
  //$(document).ready(function(){
  //$(document).on('turbolinks:load', function(){
  
      
	  
	  
 //});  
  
  //選択した行のインデックスを取得
  function getSelectedChildIndex(id){
    item = document.getElementsByName("material_id[]");
    var select_index = 0;
	
	for (var index = 0; index < item.length  ; index ++) {
	  if (id == item[index].value){
	    select_index = index;
	  }
	}
    return select_index;
  }
  //選択した行のインデックスを取得(手入力を考慮し、品番で判別)
  function getSelectedChildIndexCode(){
    item = document.getElementsByName("material_code[]");
    var select_index = 0;
	
	for (var index = 0; index < item.length  ; index ++) {
	  //upd170616
	  //if (gMaterial_code == item[index].value){
	  if (gTop == item[index].offsetTop){
        select_index = index;
	  }
	}
    return select_index;
  }
  
  //選択した行のインデックスを取得(数量の場合)
  function getSelectedChildIndexQuantity(){
    item = document.getElementsByName("quantity[]");
    var select_index = 0;
	
	//debugger;
	
	for (var index = 0; index < item.length  ; index ++) {
	  //upd170616
	  if (gControl_id == item[index].id){
	  //if (gMaterial_code == item[index].value){
	    select_index = index;
		//select_index = (item.length -1) - index ;
	  }
	}
    return select_index;
  }
  
  //タブ判定のため、品番をグローバルへセット
  function setMaterialCode(thisValue){
    gMaterial_code = thisValue;
	
  }
  
  //更新前に数量をチェックする
  //function checkQuantity(ok_flag){
  var checkQuantity = function(ok_flag){ 
  
    quantity = document.getElementsByName("quantity[]");
	item = document.getElementsByName("material_id[]");
	
	
	//var message = "";
	
	for (var i = 0; i < quantity.length ; i ++) {
	    if (quantity[i].value == undefined || quantity[i].value == 0){
	      //debugger;
		  itemName = item[i].options[item[i].selectedIndex].innerText;
		  
		  window.confirm(itemName + 'の数量を入力してください。');
		  //message = message + itemName + 'の数量を入力してください。';
		  
		  ok_flag = false;
	    }
	}
	
	//if (ok_flag == false){
	//  window.confirm( message );
	//}
	
	return ok_flag;
  }
  
 
  //各値の自動セット-ajax
  function setItem(item_id, selected_index)
  {
		 id = parseInt(item_id);
   
  	  
		 if (id != 1 ) {
		 //手入力は除外&明細に同一品番はないものとする(ある場合は正常動作しない）
			$.get("<%= purchase_order_historiez_material_select_path %>",
             {id: id },
              function(data){
		        
				
				//商品コードをセット
				obj = document.getElementById("material_code").textContent;
				document.getElementsByName("material_code[]")[selected_index].value = obj;
				
				//商品名をセット
				obj = document.getElementById("material_name").textContent;
				document.getElementsByName("material_name[]")[selected_index].value = obj;
				
				//メーカー名をセット
				//obj = document.getElementById("maker_name").textContent;
				//document.getElementsByName("maker_name[]")[selected_index].value = obj;
				obj = document.getElementById("maker_id_hide").textContent;
			    if (obj != null){
		          var index = parseInt(obj);
                  $(".searchableMaker")[selected_index].value = index; 
				  
				  $(".searchableMaker").trigger("change"); 
		        }
				
				//定価をセット
				obj = document.getElementById("list_price").textContent;
				document.getElementsByName("list_price[]")[selected_index].value = obj;
				
			  }
            );
		  }
  }
  
  function setItem_old(e)
  {  
     //objId = document.getElementsByName("material_id");
	 objId = document.getElementById("material_id");
	 product_select = $(this);
	
    //product_select.parent().find('.cost-input').val(product_select.find(':selected').data('unit_cost'))
	 //product_select.parent().find('.searchableMaterial').val(product_select.find(':selected').data('material_id'))
	 
	 var id = product_select.find(':selected').data('material_id');
	 //debugger;
	 
	 // cIndex += 1;     
     //項目名
     // $.get("<%= purchase_order_datum_material_select_path %>",
     //  {id: id },
     //   function(data){
     //     document.getElementsByName("material_code")[cIndex -1].value = document.getElementsByName("material_code_hide")[0].textContent;
	 //	  }
     // );

  }  
  
  function focusQuantity(selected_index)
  {
     document.getElementsByName("quantity[]")[selected_index].focus();
     //debugger;
  }
  
  //ENTER→TABキーに変換する処理。
  //レンダリングの場合は、共通化ができない（なぜか）
  $('[tabindex]').keydown(function (e) {
    if (e.keyCode == 13 || e.keyCode == 9) {
	    //if (document.getElementById("material_id").value == 1) {
		//if (gMaterial_id == 0) {
        // gMaterial_id = document.getElementById("material_id").value;
		//}
		
		
		var current = document.activeElement;
		gControl_id = current.id
		
		if (gSelectedIndex == 0){
		   
		   //debugger;
		   
		   if (gControl_id.substr(-8,8) == "quantity") {
		   //数量のみ変更した場合を考慮(add170616)
		     selectedIndex  = getSelectedChildIndexQuantity();
			 
			 
		   }else if (gControl_id == "material_code") {
		   //手入力の場合はコードでインデックス取得
             
			 //idで判断つかないのでx座標から推定する。-->再入力でNG...
			 gTop = current.offsetTop;
			 
			 selectedIndex  = getSelectedChildIndexCode();
			 
			 //debugger;
		   }
 		 }else{
		   selectedIndex = gSelectedIndex ;
		   
		 }
		
		var tabindex = parseInt($(this).attr('tabindex'));
        $('[tabindex='+(tabindex+1)+']')[selectedIndex].focus();
    
	    return false;
	}
    
  }); 
   
 </script>
