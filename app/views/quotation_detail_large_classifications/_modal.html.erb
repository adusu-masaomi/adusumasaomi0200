
<div class="modal-dialog modal-lg" >
  <div class="modal-content" >
  <div style="padding-left : 15px;">
<%= simple_form_for @quotation_detail_large_classification, remote: true, :html => { id: "mymodal", :class => 'form-horizontal' } do |f| %>
  
  <%= f.label :"件名", {:class => "my-custom-class-l"} %></br>
  <%= f.collection_select :quotation_header_id, QuotationHeader.all, :id, :construction_name, {:prompt => 'どれか一つを選択して下さい'} , {id:'quotation_header_id', :selected => @quotation_detail_large_classification.quotation_header_id, :class => "searchableQuotationHeader", :tabindex=>"0", style: 'width:330px; border-bottom-left-radius: -15px'  } %></br>
  <%= f.label :"項目名／備考", {:class => "my-custom-class-l"}  %></br>
  <!--<%= f.collection_select :quotation_items_division_id, QuotationItemsDivision.all, :id, :quotation_items_division_name, {:selected => @quotation_detail_large_classification.quotation_items_division_id || 1} , {id:'quotation_items_division_id', :class => "my-custom-class", :onchange => "setWhenSpecification(this.form)" } %></br>-->
  <%= f.select :quotation_items_division_id, QuotationDetailLargeClassification.choices, {:selected => @quotation_detail_large_classification.quotation_items_division_id || 1}, {id:'quotation_items_division_id', :tabindex=>"1", :class => "my-custom-class", :onchange => "setWhenSpecification(this.form)"} %></br>
  
  <%= f.label :"項目名", {:class => "my-custom-class-l"} %></br>
  <%= f.collection_select :quotation_large_item_id, QuotationLargeItem.all, :id, :quotation_large_item_name, {:selected => @quotation_detail_large_classification.quotation_large_item_id || 1} , {id:'quotation_large_item_id', :tabindex=>"2", :class => "searchableQuotationItem",  style: 'width:220px' } %></br>
  <%= f.input :quotation_large_item_name , label: "項目名(手入力可)", input_html:{id:"quotation_large_item_name", :tabindex=> "3"}  %>
  <%= f.input :quotation_large_specification , label: "仕様名(手入力可)", input_html:{id:"quotation_large_specification", :tabindex=>"4" }  %>

  <%= f.label :"行番号" , { :class => "my-custom-class-l"} %></br>
  <%= f.select :line_number, QuotationDetailLargeClassification.serial_number, {}, { :tabindex=>"5", class: "searchableNumber" , style: 'width:100px' } %>
  <%= f.check_box :check_line_insert, {}, "true", "false" %>
  <%= f.label_tag :check_line_insert, '行挿入する' %></br>
  
  <%= f.input :execution_quantity, :input_html => {id:'execution_quantity', :tabindex=>"6", :value => @quotation_detail_large_classification.execution_quantity || 1, :onchange => "changeQuantity()" } %>
  <%= f.input :quantity, label: "見積数量", :input_html => {id:'quantity', :tabindex=>"7", :value => @quotation_detail_large_classification.quantity || 1 } %>
  <%= f.label :"単位" , {} %></br>
  <%= f.collection_select :quotation_unit_id, QuotationUnit.all, :id, :quotation_unit_name, {:prompt => 'どれか一つを選択して下さい', :selected => @quotation_detail_large_classification.quotation_unit_id || 1 } , {id:'quotation_unit_id', :tabindex=>"8", :class => "searchableQuotationUnit",  style: 'width:220px' } %></br>
  <%= f.input :quotation_unit_name , label: "単位名(手入力可)", input_html:{id:"quotation_unit_name", :tabindex=>"9", :value => @quotation_detail_large_classification.quotation_unit_name || QuotationUnit.where(:id => 1).pluck(:quotation_unit_name)   }  %>
  <%= f.input :execution_price, hint: "＊自動計算されます。手入力可。", :input_html => {id:'execution_price', :tabindex=>"10"} %>
  <%= f.input :quote_price, hint: "＊自動計算されます。手入力可。", :input_html => {id:'quote_price', :tabindex=>"11"} %>
  <%= f.input :labor_productivity_unit, hint: "＊自動計算されます。手入力可。", :input_html => {:tabindex=>"12"}  %>
  
  <%= hidden_field_tag(:quotation_header_id, 'index') %>
  <%= hidden_field_tag(:quotation_large_item_id, 'index') %>
  
  <%= f.button :submit, :class => 'btn-primary' %>
  <!--<input type="button" onclick="submit();" class = 'btn btn-primary' value="登録する" />-->
  <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                quotation_detail_large_classifications_path(quotation_header_id: params[:quotation_header_id]), :class => 'btn btn-default' %>
<% end %>
</div>
 </div>
</div>


<script type="text/javascript">
  //$(document).on('ready page:load', function(){
  
  //モーダルの場合は、このコードがないとselect2が正常動作しない。
  $.fn.modal.Constructor.prototype.enforceFocus = function() {};
  
  
  $(document).ready(function(){
    
	//$('#myModal').on('shown.bs.modal', function () {
    //   $('#quotation_header_id').focus();
    //})  
  　　
	 
     //検索可能なリストボックス(注文Noの場合)
	 //この方法(fn.modal--文を記述せずにdropdownParent加える)もあるが、全てに対策しなければならないのでカットする。
     //$(".searchableQuotationHeader").select2({ theme: "bootstrap", dropdownParent: $("#myModal") });
	 $(".searchableQuotationHeader").select2({ theme: "bootstrap" });
	 
	 
	 //select2をenterキー押下した場合(リストが閉じられた時)のタブ移動。イマイチだが・・
	 //一覧名の場合
	 $( ".searchableQuotationHeader" ).on("select2:close", function (e) {
		setTimeout(function() {
		    $('[tabindex=1]').focus();
		}, 0);  
	 });
	 
     //$(".searchableQuotationItem").select2({ theme: "bootstrap"  });
	 $(".searchableQuotationItem").select2({ theme: "bootstrap"  });
     $( ".searchableQuotationItem" ).change(function(e) {
      　  setQuotationLarageItemName();
	      setQuotationLarageSpecification();
     });
	 $( ".searchableQuotationItem" ).on("select2:close", function (e) {
	 　setTimeout(function() {
          $('[tabindex=3]').focus();
        }, 0);  
	 });
 
　　 　
     $(".searchableQuotationUnit").select2({ theme: "bootstrap"});
	 $( ".searchableQuotationUnit" ).change(function(e) {
      　  setQuotationUnitName();
	 });
	 $( ".searchableQuotationUnit" ).on("select2:close", function (e) {
	 　setTimeout(function() {
          $('[tabindex=9]').focus();
        }, 0);  
	 });
	 
     $(".searchableNumber").select2({ theme: "bootstrap"  });
     $( ".searchableNumber" ).on("select2:close", function (e) {
	 　setTimeout(function() {
          $('[tabindex=6]').focus();
        }, 0);  
	 });
 
     //検索可能なリストボックス(顧客名の場合)
     //$(".searchableCustomerName").select2({ theme: "bootstrap" });
     // $( ".searchableCustomerName" ).change(function(e) {
     // 　  setCustomerNameDefault();
     //});
	 
   });

   //実行→見積数量の自動変更
  function changeQuantity()
  {  
     //debugger;
     if (document.getElementById("execution_quantity").value > 0) {
  　　document.getElementById("quantity").value = document.getElementById("execution_quantity").value;
     }
  } 

   //項目名のセット
  function setQuotationLarageItemName()
  {  
    obj = document.getElementById("quotation_large_item_id");
     quotation_large_item_id = parseInt(obj.value);
     $.get("<%= quotation_detail_large_classificationz_quotation_large_item_select_path %>",
       {id: quotation_large_item_id },
        function(data){
          obj = document.getElementById("quotation_large_item_name").textContent;
          document.getElementById("quotation_large_item_name").value = obj;
		  }
      );
   };  
  //仕様のセット
  function setQuotationLarageSpecification()
  {  
    obj = document.getElementById("quotation_large_item_id");
     quotation_large_item_id = parseInt(obj.value);
     $.get("<%= quotation_detail_large_classificationz_quotation_large_specification_select_path %>",
       {id: quotation_large_item_id },
        function(data){
          obj = document.getElementById("quotation_large_specification").textContent;
          document.getElementById("quotation_large_specification").value = obj;
		  }
      );
   };  
   //単位名のセット
  function setQuotationUnitName()
  {  
    obj = document.getElementById("quotation_unit_id");
     quotation_unit_id = parseInt(obj.value);
     $.get("<%= quotation_detail_large_classificationz_quotation_unit_name_select_path %>",
       {id: quotation_unit_id },
        function(data){
		  //debugger;
          obj = document.getElementById("quotation_unit_name").textContent;
          document.getElementById("quotation_unit_name").value = obj;
		  }
      );
   };  
   //区分が仕様を選択した時　　
   function setWhenSpecification(f)
   {
          obj = document.getElementById("quotation_items_division_id");
          index = obj.selectedIndex;
          if (index == 1){
             //数量を０にセット
             obj2 = document.getElementById("quantity");
             obj2.value = 0;

             //単位をデフォ(１)にセット
             $(".searchableQuotationUnit").select2("val","1");
          }
   }
   
  //ENTER→TABキーに変換する処理。
  //modalの場合は、共通化ができない（なぜか）
  $('[tabindex]').keydown(function (e) {
    if (e.keyCode == 13 || e.keyCode == 9) {
        var tabindex = parseInt($(this).attr('tabindex'));
        $('[tabindex='+(tabindex+1)+']').focus();
    
	    return false;
	}
    
  });



</script>
