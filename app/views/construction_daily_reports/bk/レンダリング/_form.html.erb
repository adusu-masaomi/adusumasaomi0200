<% @staff = Staff.new unless @staff %>

<%= simple_form_for @construction_daily_report, :html => {id: "report-form" ,  :class => 'form-horizontal' } do |f| %>
  <%= f.input :working_date %>
  <%= f.label :工事名, {:class => "my-custom-class-l"}  %></br>
  <%= f.collection_select :construction_datum_id, ConstructionDatum.all, :id, :construction_name, {:prompt => "どれか一つを選択して下さい"} , {id:"construction_datum_id", class: "searchableConstruction" , style: 'width:220px;'} %>
  <%= f.label :社員, {:class => "my-custom-class-l"}  %></br>
  <%= f.collection_select :staff_id, Staff.all, :id, :staff_name, {:prompt => "どれか一つを選択して下さい"} , {id:"staff_id", class: "my-custom-class" , :onchange=> "getDaylyPay(this.form)"} %>
  <!--<%= f.collection_select :dayly_pay, Staff.all, :id, :dayly_pay, {:selected => @construction_daily_report.staff_id} , { id:"dayly_pay" } %>-->
  <!--<%= f.hidden_field_tag 'staff_pay', @staff_pay, input_html:{id: "dayly_pay"} %>-->
  <%= f.input :start_time_1, default: Time.parse('00:00'), input_html:{id: "start_time_1" , :onchange => "calcTimeVarious(this.form)"} %>
  <%= f.input :end_time_1, default: Time.parse('00:00'), input_html:{id: "end_time_1", :onchange => "calcTimeVarious(this.form)"} %>
  <%= f.input :start_time_2, default: Time.parse('00:00') , input_html:{id: "start_time_2", :onchange => "calcTimeVarious_2(this.form)"} %>
  <%= f.input :end_time_2, default: Time.parse('00:00') , input_html:{id: "end_time_2", :onchange => "calcTimeVarious_2(this.form)"} %>
  <%= f.input :working_times, input_html:{id:"working_times"} %>
  <%= f.input :man_month, input_html:{id:"man_month"} %>
  <%= f.input :labor_cost, input_html:{id:"labor_cost"} %>
  
  <%= f.button :submit, :class => 'btn-primary' %>
  <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                construction_daily_reports_path, :class => 'btn btn-default' %>
  <!--<%= render 'detail' %>-->
  <!--<%= render partial: 'staffs', collection:@staff_pay %>-->
  
<% end %>

 

<script type="text/javascript">

　　$(document).ready(function(){
  　　//検索可能なリストボックス(品名の場合)
	　$(".searchableConstruction").select2({ theme: "bootstrap" });
   });
  
  //勤務時間計算
  var kinmu_time = 0;
  var kinmu_time_2 = 0;
  var start_time = 0;
  var end_time = 0;
  
  function calcTimeVarious(f)
   { 
     
	 // 勤務時間を計算
     kinmu_time = 0;
	 
  	 //開始時間1
	 obj = document.getElementById("start_time_1");
	 start_time = obj.value 
	 if (start_time => 0) {
	 	start_time = ( parseInt(start_time) * 3600 ) + ( parseInt(obj.nextElementSibling.value) * 60 );
	 }
	 //終了時間1
	 obj = document.getElementById("end_time_1");
	 end_time = obj.value 
	 
	 if (end_time => 0) {
	 	end_time = ( parseInt(end_time) * 3600 ) + (parseInt(obj.nextElementSibling.value) * 60 );
	 
 	 	//calcWorkTime.call(); 
	    var tmp_kinmu_time = 0;
		kinmu_time = calcWorkTime(tmp_kinmu_time); 
	 	
	 	//テキストへセット
     	document.getElementById("working_times").value = kinmu_time + kinmu_time_2 ;  
   
     	// 工数を算出
   　	if (kinmu_time => 0) {
        	var temp_kinmu_time = 0 ;
     		temp_kinmu_time = (kinmu_time + kinmu_time_2) /27000 ;
			temp_kinmu_time =  floatFormat(temp_kinmu_time, 3) ; 
			document.getElementById("man_month").value = temp_kinmu_time;
			
			//日給を取得
　　　　　   getDaylyPay.call({}, f)
           // test
			//document.getElementById("labor_cost").value = document.getElementById("dayly_pay").value ; 
		 }　　　
   	　 }
   
   };
   function calcTimeVarious_2(f)
   { 
     //calcTimeVariousとほぼ同じ
   
     // 勤務時間を計算
     kinmu_time_2 = 0;
	 
  	 //開始時間1
	 obj = document.getElementById("start_time_2");
	 start_time = obj.value 
	 if (start_time => 0) {
	 	start_time = ( parseInt(start_time) * 3600 ) + ( parseInt(obj.nextElementSibling.value) * 60 );
	 }
	 //終了時間1
	 obj = document.getElementById("end_time_2");
	 end_time = obj.value 
	 
	 if (end_time => 0) {
	 	end_time = ( parseInt(end_time) * 3600 ) + (parseInt(obj.nextElementSibling.value) * 60 );
	    
		var tmp_kinmu_time = 0;
 	 	kinmu_time_2 = calcWorkTime(tmp_kinmu_time); 
	 
	 	//テキストへセット
     	document.getElementById("working_times").value = kinmu_time + kinmu_time_2;  
   
     	// 工数を算出
   　	if (kinmu_time_2 => 0) {
        	var temp_kinmu_time = 0 ;
     		temp_kinmu_time = (kinmu_time + kinmu_time_2) / 27000 ;
			temp_kinmu_time =  floatFormat(temp_kinmu_time, 3) ; 
			document.getElementById("man_month").value = temp_kinmu_time;
	 	}　
		 
		//日給を取得
　　　　　getDaylyPay.call({}, f)
		 
		 　　
   	　 }
   
   };
  
   // 日給をajaxで取得
   function getDaylyPay(f){
     var staff_id = f.staff_id.value;
      $.get("<%= construction_daily_reportz_staff_pay_select_path %>",
          { id: staff_id },
          function(data){
		    //document.getElementById("dayly_pay").value = data;
			//$("#report-form").append("<%=j(render("staffs", :staff_id => @staff_pay)) %>");
			
			//$( "dayly_pay" ).html( data );
		    //$("#report-form").append("<%=j(render("staffs", staff_id: @staff_id)) %>");
		    objX = document.getElementById("dayly_pay");
		   //document.getElementById("labor_cost").value = objX.val(1) ; 
          }
        );
   }
   
    //function getDaylyPay(f){
    //    $.ajax({
    //        url: "construction_daily_reportz/staff_pay_select",
    //        type: "GET",
    //        data: { id: f.staff_id.value,
    //                },
    //        dataType: "html",
    //        success: function(data) {
     //           alert("success");
     //       },
     //       error: function(data) {
     //           alert("error");
     //       }
     //   });
    //};
		 
   function calcWorkTime(tmp_kinmu_time){
   	   // 勤務時間の計算
	   if (start_time >= 18000 & start_time <= 32400 & end_time >= 61200 & end_time <= 86400){
	 	  // フルタイム勤務に近ければ、休憩時間をマイナスする。
	      tmp_kinmu_time = tmp_kinmu_time + end_time - start_time - 7200; 
	   } else if (start_time >= 18000 & start_time <= 32400 & end_time >= 57600 & end_time <= 61200){
	      // フルタイム勤務に近ければ、休憩時間をマイナスする(但し小休憩は引かない)
	      tmp_kinmu_time = tmp_kinmu_time + end_time - start_time - 3600; 
	   } else if (start_time >= 55800 & start_time <= 86400 & end_time >= 0 & end_time <= 28800){
	      tmp_kinmu_time = tmp_kinmu_time + 86400 - end_time + start_time;	  
	   } else {
	      tmp_kinmu_time = tmp_kinmu_time + end_time - start_time;	  
	  }
      
	  return tmp_kinmu_time;
	  
   }
   // 小数点n位までを残す関数
   // number=対象の数値
   // n=残したい小数点以下の桁数
   function floatFormat( number, n ) {
	   var _pow = Math.pow( 10 , n ) ;
       return Math.round( number * _pow ) / _pow ;
   }
</script>
	  